// <auto-generated>
using System.Reflection;

namespace FxResources.System.Text.RegularExpressions
{
    internal static class SR { }
}
namespace System
{
    internal static partial class SR
    {
        /// <summary>Regular expression parser error '{0}' at offset {1}.</summary>
        internal static string @Generic => "Generic";
        /// <summary>Alternation conditions do not capture and cannot be named.</summary>
        internal static string @AlternationHasNamedCapture => "AlternationHasNamedCapture";
        /// <summary>Alternation conditions cannot be comments.</summary>
        internal static string @AlternationHasComment => "AlternationHasComment";
        /// <summary>Destination array is not long enough to copy all the items in the collection. Check array index and length.</summary>
        internal static string @Arg_ArrayPlusOffTooSmall => "Arg_ArrayPlusOffTooSmall";
        /// <summary>The array cannot contain null elements.</summary>
        internal static string @ArgumentNull_ArrayWithNullElements => "ArgumentNull_ArrayWithNullElements";
        /// <summary>Cannot include class \\{0} in character range.</summary>
        internal static string @ShorthandClassInCharacterRange => "ShorthandClassInCharacterRange";
        /// <summary>Cannot include class in character range.</summary>
        internal static string @ShorthandClassInCharacterRangeNoPlaceholder => "ShorthandClassInCharacterRangeNoPlaceholder";
        /// <summary>Start index cannot be less than 0 or greater than input length.</summary>
        internal static string @BeginIndexNotNegative => "BeginIndexNotNegative";
        /// <summary>Capture group numbers must be less than or equal to Int32.MaxValue.</summary>
        internal static string @QuantifierOrCaptureGroupOutOfRange => "QuantifierOrCaptureGroupOutOfRange";
        /// <summary>Capture number cannot be zero.</summary>
        internal static string @CaptureGroupOfZero => "CaptureGroupOfZero";
        /// <summary>Count cannot be less than -1.</summary>
        internal static string @CountTooSmall => "CountTooSmall";
        /// <summary>Enumeration has either not started or has already finished.</summary>
        internal static string @EnumNotStarted => "EnumNotStarted";
        /// <summary>Illegal conditional (?(...)) expression.</summary>
        internal static string @AlternationHasMalformedCondition => "AlternationHasMalformedCondition";
        /// <summary>AppDomain data '{0}' contains the invalid value or object '{1}' for specifying a default matching timeout for System.Text.RegularExpressions.Regex.</summary>
        internal static string @IllegalDefaultRegexMatchTimeoutInAppDomain => "IllegalDefaultRegexMatchTimeoutInAppDomain";
        /// <summary>Illegal \\ at end of pattern.</summary>
        internal static string @UnescapedEndingBackslash => "UnescapedEndingBackslash";
        /// <summary>Illegal {x,y} with x &gt; y.</summary>
        internal static string @ReversedQuantifierRange => "ReversedQuantifierRange";
        /// <summary>Incomplete \\p{X} character escape.</summary>
        internal static string @InvalidUnicodePropertyEscape => "InvalidUnicodePropertyEscape";
        /// <summary>Internal error in ScanRegex.</summary>
        internal static string @InternalError_ScanRegex => "InternalError_ScanRegex";
        /// <summary>Invalid group name: Group names must begin with a word character.</summary>
        internal static string @CaptureGroupNameInvalid => "CaptureGroupNameInvalid";
        /// <summary>Argument {0} cannot be zero-length.</summary>
        internal static string @InvalidEmptyArgument => "InvalidEmptyArgument";
        /// <summary>Length cannot be less than 0 or exceed input length.</summary>
        internal static string @LengthNotNegative => "LengthNotNegative";
        /// <summary>Malformed \\k&lt;...&gt; named back reference.</summary>
        internal static string @MalformedNamedReference => "MalformedNamedReference";
        /// <summary>(?({0}) ) malformed.</summary>
        internal static string @AlternationHasMalformedReference => "AlternationHasMalformedReference";
        /// <summary>Alternation has malformed reference.</summary>
        internal static string @AlternationHasMalformedReferenceNoPlaceholder => "AlternationHasMalformedReferenceNoPlaceholder";
        /// <summary>Malformed \\p{X} character escape.</summary>
        internal static string @MalformedUnicodePropertyEscape => "MalformedUnicodePropertyEscape";
        /// <summary>Invalid pattern '{0}' at offset {1}. {2}</summary>
        internal static string @MakeException => "MakeException";
        /// <summary>Missing control character.</summary>
        internal static string @MissingControlCharacter => "MissingControlCharacter";
        /// <summary>Nested quantifier '{0}'.</summary>
        internal static string @NestedQuantifiersNotParenthesized => "NestedQuantifiersNotParenthesized";
        /// <summary>Nested quantifier no parenthesized.</summary>
        internal static string @NestedQuantifiersNotParenthesizedNoPlaceholder => "NestedQuantifiersNotParenthesizedNoPlaceholder";
        /// <summary>Result cannot be called on a failed Match.</summary>
        internal static string @NoResultOnFailed => "NoResultOnFailed";
        /// <summary>Not enough )'s.</summary>
        internal static string @InsufficientClosingParentheses => "InsufficientClosingParentheses";
        /// <summary>Collection is read-only.</summary>
        internal static string @NotSupported_ReadOnlyCollection => "NotSupported_ReadOnlyCollection";
        /// <summary>This operation is only allowed once per object.</summary>
        internal static string @OnlyAllowedOnce => "OnlyAllowedOnce";
        /// <summary>This platform does not support writing compiled regular expressions to an assembly.</summary>
        internal static string @PlatformNotSupported_CompileToAssembly => "PlatformNotSupported_CompileToAssembly";
        /// <summary>Quantifier {x,y} following nothing.</summary>
        internal static string @QuantifierAfterNothing => "QuantifierAfterNothing";
        /// <summary>The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors.</summary>
        internal static string @RegexMatchTimeoutException_Occurred => "RegexMatchTimeoutException_Occurred";
        /// <summary>Replacement pattern error.</summary>
        internal static string @ReplacementError => "ReplacementError";
        /// <summary>[x-y] range in reverse order.</summary>
        internal static string @ReversedCharacterRange => "ReversedCharacterRange";
        /// <summary>A subtraction must be the last element in a character class.</summary>
        internal static string @ExclusionGroupNotLast => "ExclusionGroupNotLast";
        /// <summary>Insufficient hexadecimal digits.</summary>
        internal static string @InsufficientOrInvalidHexDigits => "InsufficientOrInvalidHexDigits";
        /// <summary>Too many | in (?()|).</summary>
        internal static string @AlternationHasTooManyConditions => "AlternationHasTooManyConditions";
        /// <summary>Too many )'s.</summary>
        internal static string @InsufficientOpeningParentheses => "InsufficientOpeningParentheses";
        /// <summary>Reference to undefined group number {0}.</summary>
        internal static string @UndefinedNumberedReference => "UndefinedNumberedReference";
        /// <summary>Reference to undefined group number.</summary>
        internal static string @UndefinedNumberedReferenceNoPlaceholder => "UndefinedNumberedReferenceNoPlaceholder";
        /// <summary>Reference to undefined group name '{0}'.</summary>
        internal static string @UndefinedNamedReference => "UndefinedNamedReference";
        /// <summary>Reference to undefined group name.</summary>
        internal static string @UndefinedNamedReferenceNoPlaceholder => "UndefinedNamedReferenceNoPlaceholder";
        /// <summary>(?({0}) ) reference to undefined group.</summary>
        internal static string @AlternationHasUndefinedReference => "AlternationHasUndefinedReference";
        /// <summary>Alternation has a reference to undefined group.</summary>
        internal static string @AlternationHasUndefinedReferenceNoPlaceholder => "AlternationHasUndefinedReferenceNoPlaceholder";
        /// <summary>Unexpected opcode in regular expression generation: {0}.</summary>
        internal static string @UnexpectedOpcode => "UnexpectedOpcode";
        /// <summary>Unknown property '{0}'.</summary>
        internal static string @UnrecognizedUnicodeProperty => "UnrecognizedUnicodeProperty";
        /// <summary>Unknown property Unicode property.</summary>
        internal static string @UnrecognizedUnicodePropertyNoPlaceholder => "UnrecognizedUnicodePropertyNoPlaceholder";
        /// <summary>Unrecognized control character.</summary>
        internal static string @UnrecognizedControlCharacter => "UnrecognizedControlCharacter";
        /// <summary>Unrecognized escape sequence \\{0}.</summary>
        internal static string @UnrecognizedEscape => "UnrecognizedEscape";
        /// <summary>Unrecognized grouping construct.</summary>
        internal static string @InvalidGroupingConstruct => "InvalidGroupingConstruct";
        /// <summary>Unterminated [] set.</summary>
        internal static string @UnterminatedBracket => "UnterminatedBracket";
        /// <summary>Unterminated (?#...) comment.</summary>
        internal static string @UnterminatedComment => "UnterminatedComment";

        internal static string Format(string resourceFormat, params object?[]? args)
        {
            return resourceFormat;
        }
    }
}
